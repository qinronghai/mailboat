#!/usr/bin/sh
#
# This hook file copied & edited from git default samples to make sure:
# - Filenames are not using non-ASCII characters
# - No whitespace error in files
# - Code is formatted

#### Check Filenames ####

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test "$(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c)" != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
if test "$(git diff-index --check --cached $against --)"; then
	echo "Error: Whitespace checking does not pass, please fix before commiting:"
	git diff-index --check --cached $against --
	exit 1
fi

#### Check Code Style ####
# If you want this hook automatically format code for you, use `git config hooks.autoformatcode true`
autoformatcode=$(git config --type bool hooks.autoformatcode)

code_style_checking_result=$(black --check bamboo/ tests/ >/dev/null 2>&1)

if [ "$code_style_checking_result" = "1" ]; then
	if [ "$autoformatcode" = "true" ]; then
		formating_result=$(black bamboo/ tests/)
		if [ "$formating_result" != "0" ]; then
			echo "Error: black return unexceptly code $formating_result while formating."
			exit 1
		fi
	else
		cat <<\EOF
Error: attempt to commit code in unexceptly style.

Consistent code style help other people read the code.

Use "black" to format your code:

	black bamboo/ tests/

or, you may call this hook to help you format code before every commit:

	git config hooks.autoformatcode true
EOF
		exit 1
	fi
fi
